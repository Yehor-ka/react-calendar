{"version":3,"sources":["components/SaveDialog.jsx","components/FullCalendar.jsx","App.js","index.js"],"names":["SaveDialog","eventOpenNow","setEventOpenNow","dateClickItem","isOpen","onClose","handleAddEvent","isOpenEdit","onCloseEdit","setEventInfo","eventsInfo","isWholeDay","setIsWholeDay","React","useState","title","date","allDay","time","description","backgroundColor","newEvent","setNewEvent","isTitleError","setIsTitleError","handleClose","onChange","e","name","target","value","length","prevState","Dialog","open","IconButton","onClick","style","position","top","right","DialogContent","marginTop","TextField","label","fullWidth","defaultValue","type","InputLabelProps","shrink","FormControl","width","InputLabel","htmlFor","Select","native","inputProps","id","step","DialogActions","Button","eventClick","event","remove","newEvents","filter","removedEvent","Number","handleRemoveEvent","editedEvents","map","editedEvent","start","Date","disabled","EventCalendar","JSON","parse","localStorage","getItem","isOpenDialog","setIsOpenDialog","setIsOpenEdit","setDateClickItem","eventId","setEventId","useEffect","setItem","stringify","initialView","headerToolbar","left","center","editable","droppable","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","events","dateClick","dateClickInfo","dateStr","timeDate","slice","startStr","_def","extendedProps","eventDrop","newDate","dateEvent","day","String","getDate","month","getMonth","getFullYear","structureDate","_instance","range","dragAndDropEvent","calendarEvents","dateId","item","getDropEvent","publicId","OtherEvents","addedEvent","allDayEvent","alert","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yWAuOeA,MA/Nf,YAaI,IAZFC,EAYC,EAZDA,aACAC,EAWC,EAXDA,gBACAC,EAUC,EAVDA,cACAC,EASC,EATDA,OACAC,EAQC,EARDA,QACAC,EAOC,EAPDA,eACAC,EAMC,EANDA,WACAC,EAKC,EALDA,YACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,WACAC,EACC,EADDA,cAEA,EAAgCC,IAAMC,SAAS,CAC7CC,MAAO,GACPC,KAAMb,EACNc,QAAQ,EACRC,KAAM,QACNC,YAAa,GACbC,gBAAiB,KANnB,mBAAOC,EAAP,KAAiBC,EAAjB,KAQA,EAAwCT,IAAMC,UAAS,GAAvD,mBAAOS,EAAP,KAAqBC,EAArB,KAEMC,EAAc,WAClBH,EAAY,CACVP,MAAO,GACPC,KAAM,GACNC,OAAQN,EACRO,KAAM,QACNC,YAAa,GACbC,gBAAiB,KAEnBR,GAAc,GACdY,GAAgB,GAChBnB,GAAQ,GACRG,GAAY,IAwDRkB,EAAW,SAACC,GAChB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACV,WAATF,GAAgC,SAAVE,IAA8B,IAAVA,EAE1B,WAATF,GAAgC,UAAVE,IAA+B,IAAVA,GACpDlB,GAAc,GAFdA,GAAc,GAIH,UAATgB,IAAsC,IAAjBE,EAAMC,QAAgBD,EAAMC,OAAS,IAC5DP,GAAgB,IAEhBA,GAAgB,GACZpB,EACFkB,GAAY,SAACU,GAAD,mBAAC,eACRA,GADO,kBAETJ,EAAOE,OAGV5B,GAAgB,SAAC8B,GAAD,mBAAC,eACZA,GADW,kBAEbJ,EAAOE,SAMhB,OACE,eAACG,EAAA,EAAD,CAAQC,KAAM9B,GAAUG,EAAYF,QAASoB,EAA7C,UACE,cAACU,EAAA,EAAD,CACEC,QAASX,EACTY,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOC,MAAO,OAClD,aAAW,SAHb,SAIE,cAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CAAeJ,MAAO,CAAEK,UAAW,QAAnC,UACE,cAACC,EAAA,EAAD,CACEf,KAAK,QACLgB,MAAM,aACNC,WAAS,EACTnB,SAAUA,EACVoB,aAAcvC,EAAaN,EAAac,MAAQ,KAElD,cAAC4B,EAAA,EAAD,CACEjB,SAAUA,EACVE,KAAK,OACLgB,MAAM,aACNG,KAAK,OACLD,aAAcvC,EAAaN,EAAae,KAAO,GAC/C6B,WAAS,EACTG,gBAAiB,CACfC,QAAQ,KAGZ,eAACC,EAAA,EAAD,CAAab,MAAO,CAAEc,MAAO,QAA7B,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,wBACA,eAACC,EAAA,EAAD,CACEC,QAAM,EACNT,cAAcvC,GAAaN,EAAagB,OACxCS,SAAUA,EACV8B,WAAY,CACV5B,KAAM,SACN6B,GAAI,qBANR,UAQE,wBAAQ3B,OAAO,EAAf,+DACA,wBAAQA,OAAO,EAAf,2HAGFnB,EAeE,KAdF,cAACgC,EAAA,EAAD,CACEjB,SAAUA,EACVkB,MAAM,aACNG,KAAK,OACLnB,KAAK,OACLkB,aAAcvC,EAAaN,EAAaiB,KAAO,QAC/C2B,WAAS,EACTG,gBAAiB,CACfC,QAAQ,GAEVO,WAAY,CACVE,KAAM,OAIZ,cAACf,EAAA,EAAD,CACEjB,SAAUA,EACVoB,aAAcvC,EAAaN,EAAakB,YAAc,GACtDS,KAAK,cACLgB,MAAM,QACNC,WAAS,IAEX,eAACK,EAAA,EAAD,CAAab,MAAO,CAAEc,MAAO,QAA7B,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,yBACA,eAACC,EAAA,EAAD,CACEC,QAAM,EACNT,aAAcvC,EAAaN,EAAamB,gBAAkB,GAC1DM,SAAUA,EACV8B,WAAY,CACV5B,KAAM,kBACN6B,GAAI,qBANR,UAQE,wBAAQ,aAAW,OAAO3B,MAAM,KAChC,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,0BAGJ,cAAC6B,EAAA,EAAD,UACIpD,EAQA,qCACE,cAACqD,EAAA,EAAD,CAAQxB,QAAS,kBA1KH,SAACqB,GACzBxD,EAAa4D,WAAWC,MAAMC,SAC9B,IAAMC,EAAYtD,EAAWuD,QAAO,SAACC,GAAD,OAAkBC,OAAOD,EAAaT,MAAQU,OAAOV,MACzFhD,EAAauD,GACbxC,GAAgB,GAChBhB,GAAY,GAqKqB4D,CAAkBnE,EAAa4D,WAAWC,MAAML,KAAvE,oBAGA,cAACG,EAAA,EAAD,CAAQxB,QArKI,WACtB,IAAMiC,EAAe3D,EAAW4D,KAAI,SAACC,GACnC,OAAIJ,OAAOI,EAAYd,MAAQU,OAAOlE,EAAawD,IAC1C,CACL1C,MAAOd,EAAac,MACpBC,KAAMf,EAAae,KACnBI,gBAAiBnB,EAAamB,gBAC9BH,OAAQN,EACRO,KAAMjB,EAAaiB,KACnBsD,MAAO,IAAIC,KAAJ,UAAYxE,EAAae,KAAzB,YAAiCf,EAAaiB,OACrDC,YAAalB,EAAakB,YAC1BsC,GAAIU,OAAOlE,EAAawD,KAGrBc,KAET9D,EAAa4D,GACb7D,GAAY,GACZc,EAAY,CACVP,MAAO,GACPC,KAAM,GACNC,OAAQN,EACRO,KAAM,QACNC,YAAa,GACbC,gBAAiB,KAEnBR,GAAc,GACdY,GAAgB,IA0I4BkD,SAAUnD,EAA5C,qBAXF,qCACE,cAACqC,EAAA,EAAD,CAAQxB,QAASX,EAAjB,oBACA,cAACmC,EAAA,EAAD,CAAQxB,QA9HO,WACzB9B,EAAee,GACfC,EAAY,CACVP,MAAO,GACPC,KAAM,GACNC,OAAQ,OACRE,YAAa,GACbD,KAAM,QACNE,gBAAiB,KAEnBR,GAAc,GACdY,GAAgB,GAChBnB,GAAQ,IAkHuCqE,SAAUnD,EAA/C,8BCvECoD,MA/Gf,WACE,MAAmC9D,IAAMC,SACvC8D,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,IADhD,mBAAOrE,EAAP,KAAmBD,EAAnB,KAGA,EAAwCI,IAAMC,UAAS,GAAvD,mBAAOkE,EAAP,KAAqBC,EAArB,KACA,EAAoCpE,IAAMC,UAAS,GAAnD,mBAAOP,EAAP,KAAmB2E,EAAnB,KACA,EAAoCrE,IAAMC,UAAS,GAAnD,mBAAOH,EAAP,KAAmBC,EAAnB,KACA,EAAwCC,IAAMC,SAAS,IAAvD,mBAAOb,EAAP,KAAqBC,EAArB,KACA,EAA0CW,IAAMC,SAAS,IAAzD,mBAAOX,EAAP,KAAsBgF,EAAtB,KACA,EAA8BtE,IAAMC,SAASqD,OAAOW,aAAaC,QAAQ,aAAe,GAAxF,mBAAOK,EAAP,KAAgBC,EAAhB,KAmEA,OAlEAxE,IAAMyE,WAAU,WACdR,aAAaS,QAAQ,UAAWH,KAC/B,CAACA,IAEJvE,IAAMyE,WAAU,WACdR,aAAaS,QAAQ,SAAUX,KAAKY,UAAU9E,MAC7C,CAACA,IA6DF,gCACE,cAAC,IAAD,CACE+E,YAAY,eACZC,cAAe,CACbC,KAAM,kBACNC,OAAQ,QACRpD,MAAO,kDAETqD,UAAU,EACVC,WAAW,EACXC,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,OAAQzF,EACR0F,UArDkB,SAACC,GACvBlB,EAAiBkB,EAAcC,SAC/BrB,GAAgB,IAoDZpB,WA9BY,SAACA,GACjB,IAAM0C,EAAW,UAAG1C,EAAWC,MAAMU,OAAQgC,MAAM,GAAI,IACvD5F,EAAciD,EAAWC,MAAM7C,QAC/Bf,EAAgB,CACda,MAAO8C,EAAWC,MAAM/C,MACxBC,KAAM6C,EAAWC,MAAM2C,SAASD,MAAM,EAAG,IACzCvF,OAAQ4C,EAAWC,MAAM7C,OACzBC,KAAMqF,EACN9C,GAAII,EAAWC,MAAML,GACrBtC,YAAa0C,EAAWC,MAAM4C,KAAKC,cAAcxF,YACjDC,gBAAiByC,EAAWC,MAAM1C,gBAClCyC,eAEFqB,GAAc,IAkBV0B,UAlDa,SAAC5F,GAClB,IACM6F,EAzDY,SAACC,GACrB,IAAMC,EACmC,IAAvCC,OAAOF,EAAUG,WAAWlF,OACxB,IAAMiF,OAAOF,EAAUG,WACvBH,EAAUG,UACVC,EACoC,IAAxCF,OAAOF,EAAUK,YAAYpF,OACzB,IAAMiF,OAAOF,EAAUK,WAAa,GACpCL,EAAUK,WAAa,EAG7B,OAFaL,EAAUM,cACA,IAAMF,EAAQ,IAAMH,EA+CzBM,CADE,IAAI5C,KAAKzD,EAAK8C,MAAMwD,UAAUC,MAAM/C,QAEhDgD,EAlEW,SAACC,EAAgBC,GACpC,IAAK,IAAIC,EAAO,EAAGA,EAAOF,EAAe1F,OAAQ4F,IAC/C,GAAIxD,OAAOsD,EAAeE,GAAMlE,MAAQU,OAAOuD,GAC7C,OAAOD,EAAeE,GA+DCC,CAAalH,EAAYM,EAAK8C,MAAM4C,KAAKmB,UAE5DC,EAAcpH,EAAWuD,QAC7B,SAAC0D,GAAD,OAAUxD,OAAOwD,EAAKlE,MAAQU,OAAOnD,EAAK8C,MAAM4C,KAAKmB,aAEjD7D,EAAS,sBACV8D,GADU,4BAGRN,GAHQ,IAIXxG,KAAM6F,EACNrC,MAAO,IAAIC,KAAJ,UAAYoC,EAAZ,YAAuBW,EAAiBtG,KAAxC,YAGXT,EAAauD,MAoCX,cAAC,EAAD,CACEtD,WAAYA,EACZD,aAAcA,EACdR,aAAcA,EACdC,gBAAiBA,EACjBK,WAAYA,EACZC,YAAa0E,EACb/E,cAAeA,EACfC,OAAQ4E,EACR3E,QAAS4E,EACT3E,eArFiB,SAACyH,GACtB,GAAwB,KAApBA,EAAW/G,KAAa,CAC1B,IAAMgH,EAAoC,SAAtBD,EAAW9G,SAA2C,IAAtB8G,EAAW9G,OAC/DoE,GAAW,SAACrD,GAAD,OAAeA,EAAY,KACtCvB,GAAa,SAACuB,GAAD,4BACRA,GADQ,aAAC,eAGP+F,GAHM,IAITtE,GAAI2B,EACJnE,OAAQ+G,EACRxD,MAAO,IAAIC,KAAJ,UAAYsD,EAAW/G,KAAvB,YAA+B+G,EAAW7G,KAA1C,oBAIX+G,MAAM,qIAwEJtH,WAAYA,EACZC,cAAeA,Q,SC1HRsH,MARf,WACE,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4824e0a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, TextField } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nfunction SaveDialog({\r\n  eventOpenNow,\r\n  setEventOpenNow,\r\n  dateClickItem,\r\n  isOpen,\r\n  onClose,\r\n  handleAddEvent,\r\n  isOpenEdit,\r\n  onCloseEdit,\r\n  setEventInfo,\r\n  eventsInfo,\r\n  isWholeDay,\r\n  setIsWholeDay,\r\n}) {\r\n  const [newEvent, setNewEvent] = React.useState({\r\n    title: '',\r\n    date: dateClickItem,\r\n    allDay: true,\r\n    time: '08:30',\r\n    description: '',\r\n    backgroundColor: '',\r\n  });\r\n  const [isTitleError, setIsTitleError] = React.useState(true);\r\n\r\n  const handleClose = () => {\r\n    setNewEvent({\r\n      title: '',\r\n      date: '',\r\n      allDay: isWholeDay,\r\n      time: '08:00',\r\n      description: '',\r\n      backgroundColor: '',\r\n    });\r\n    setIsWholeDay(true);\r\n    setIsTitleError(true);\r\n    onClose(false);\r\n    onCloseEdit(false);\r\n  };\r\n\r\n  const handleRemoveEvent = (id) => {\r\n    eventOpenNow.eventClick.event.remove();\r\n    const newEvents = eventsInfo.filter((removedEvent) => Number(removedEvent.id) !== Number(id));\r\n    setEventInfo(newEvents);\r\n    setIsTitleError(true);\r\n    onCloseEdit(false);\r\n  };\r\n\r\n  const handleEditEvent = () => {\r\n    const editedEvents = eventsInfo.map((editedEvent) => {\r\n      if (Number(editedEvent.id) === Number(eventOpenNow.id)) {\r\n        return {\r\n          title: eventOpenNow.title,\r\n          date: eventOpenNow.date,\r\n          backgroundColor: eventOpenNow.backgroundColor,\r\n          allDay: isWholeDay,\r\n          time: eventOpenNow.time,\r\n          start: new Date(`${eventOpenNow.date} ${eventOpenNow.time}`),\r\n          description: eventOpenNow.description,\r\n          id: Number(eventOpenNow.id),\r\n        };\r\n      }\r\n      return editedEvent;\r\n    });\r\n    setEventInfo(editedEvents);\r\n    onCloseEdit(false);\r\n    setNewEvent({\r\n      title: '',\r\n      date: '',\r\n      allDay: isWholeDay,\r\n      time: '08:00',\r\n      description: '',\r\n      backgroundColor: '',\r\n    });\r\n    setIsWholeDay(true);\r\n    setIsTitleError(true);\r\n  };\r\n\r\n  const addEventToCalendar = () => {\r\n    handleAddEvent(newEvent);\r\n    setNewEvent({\r\n      title: '',\r\n      date: '',\r\n      allDay: 'true',\r\n      description: '',\r\n      time: '08:00',\r\n      backgroundColor: '',\r\n    });\r\n    setIsWholeDay(true);\r\n    setIsTitleError(true);\r\n    onClose(false);\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    if (name === 'allDay' && (value === 'true' || value === true)) {\r\n      setIsWholeDay(true);\r\n    } else if (name === 'allDay' && (value === 'false' || value === false)) {\r\n      setIsWholeDay(false);\r\n    }\r\n    if (name === 'title' && (value.length === 0 || value.length > 30)) {\r\n      setIsTitleError(true);\r\n    } else {\r\n      setIsTitleError(false);\r\n      if (isOpen) {\r\n        setNewEvent((prevState) => ({\r\n          ...prevState,\r\n          [name]: value,\r\n        }));\r\n      } else {\r\n        setEventOpenNow((prevState) => ({\r\n          ...prevState,\r\n          [name]: value,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen || isOpenEdit} onClose={handleClose}>\r\n      <IconButton\r\n        onClick={handleClose}\r\n        style={{ position: 'absolute', top: '5px', right: '5px' }}\r\n        aria-label=\"delete\">\r\n        <CancelIcon />\r\n      </IconButton>\r\n      <DialogContent style={{ marginTop: '25px' }}>\r\n        <TextField\r\n          name=\"title\"\r\n          label=\"event name\"\r\n          fullWidth\r\n          onChange={onChange}\r\n          defaultValue={isOpenEdit ? eventOpenNow.title : ''}\r\n        />\r\n        <TextField\r\n          onChange={onChange}\r\n          name=\"date\"\r\n          label=\"event date\"\r\n          type=\"date\"\r\n          defaultValue={isOpenEdit ? eventOpenNow.date : ''}\r\n          fullWidth\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        <FormControl style={{ width: '100%' }}>\r\n          <InputLabel htmlFor=\"age-native-simple\">event time</InputLabel>\r\n          <Select\r\n            native\r\n            defaultValue={isOpenEdit ? eventOpenNow.allDay : true}\r\n            onChange={onChange}\r\n            inputProps={{\r\n              name: 'allDay',\r\n              id: 'age-native-simple',\r\n            }}>\r\n            <option value={true}>Весь день</option>\r\n            <option value={false}>Определенное время</option>\r\n          </Select>\r\n        </FormControl>\r\n        {!isWholeDay ? (\r\n          <TextField\r\n            onChange={onChange}\r\n            label=\"event time\"\r\n            type=\"time\"\r\n            name=\"time\"\r\n            defaultValue={isOpenEdit ? eventOpenNow.time : '08:30'}\r\n            fullWidth\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            inputProps={{\r\n              step: 300, // 5 min\r\n            }}\r\n          />\r\n        ) : null}\r\n        <TextField\r\n          onChange={onChange}\r\n          defaultValue={isOpenEdit ? eventOpenNow.description : ''}\r\n          name=\"description\"\r\n          label=\"notes\"\r\n          fullWidth\r\n        />\r\n        <FormControl style={{ width: '100%' }}>\r\n          <InputLabel htmlFor=\"age-native-simple\">event color</InputLabel>\r\n          <Select\r\n            native\r\n            defaultValue={isOpenEdit ? eventOpenNow.backgroundColor : ''}\r\n            onChange={onChange}\r\n            inputProps={{\r\n              name: 'backgroundColor',\r\n              id: 'age-native-simple',\r\n            }}>\r\n            <option aria-label=\"None\" value=\"\" />\r\n            <option value=\"red\">Red</option>\r\n            <option value=\"green\">Green</option>\r\n            <option value=\"blue\">Blue</option>\r\n            <option value=\"orange\">Orange</option>\r\n          </Select>\r\n        </FormControl>\r\n        <DialogActions>\r\n          {!isOpenEdit ? (\r\n            <>\r\n              <Button onClick={handleClose}>Cancel</Button>\r\n              <Button onClick={addEventToCalendar} disabled={isTitleError}>\r\n                Save\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button onClick={() => handleRemoveEvent(eventOpenNow.eventClick.event.id)}>\r\n                Remove\r\n              </Button>\r\n              <Button onClick={handleEditEvent} disabled={isTitleError}>\r\n                Edit\r\n              </Button>\r\n            </>\r\n          )}\r\n        </DialogActions>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default SaveDialog;\r\n","import React from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport SaveDialog from './SaveDialog';\r\n\r\nconst getDropEvent = (calendarEvents, dateId) => {\r\n  for (let item = 0; item < calendarEvents.length; item++) {\r\n    if (Number(calendarEvents[item].id) === Number(dateId)) {\r\n      return calendarEvents[item];\r\n    }\r\n  }\r\n};\r\n\r\nconst structureDate = (dateEvent) => {\r\n  const day =\r\n    String(dateEvent.getDate()).length === 1\r\n      ? '0' + String(dateEvent.getDate())\r\n      : dateEvent.getDate();\r\n  const month =\r\n    String(dateEvent.getMonth()).length === 1\r\n      ? '0' + String(dateEvent.getMonth() + 1)\r\n      : dateEvent.getMonth() + 1;\r\n  const year = dateEvent.getFullYear();\r\n  const newDate = year + '-' + month + '-' + day;\r\n  return newDate;\r\n};\r\n\r\nfunction EventCalendar() {\r\n  const [eventsInfo, setEventInfo] = React.useState(\r\n    JSON.parse(localStorage.getItem('events')) || [],\r\n  );\r\n  const [isOpenDialog, setIsOpenDialog] = React.useState(false);\r\n  const [isOpenEdit, setIsOpenEdit] = React.useState(false);\r\n  const [isWholeDay, setIsWholeDay] = React.useState(true);\r\n  const [eventOpenNow, setEventOpenNow] = React.useState({});\r\n  const [dateClickItem, setDateClickItem] = React.useState('');\r\n  const [eventId, setEventId] = React.useState(Number(localStorage.getItem('eventId')) || 0);\r\n  React.useEffect(() => {\r\n    localStorage.setItem('eventId', eventId);\r\n  }, [eventId]);\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem('events', JSON.stringify(eventsInfo));\r\n  }, [eventsInfo]);\r\n\r\n  const handleAddEvent = (addedEvent) => {\r\n    if (addedEvent.date !== '') {\r\n      const allDayEvent = addedEvent.allDay === 'true' || addedEvent.allDay === true ? true : false;\r\n      setEventId((prevState) => prevState + 1);\r\n      setEventInfo((prevState) => [\r\n        ...prevState,\r\n        {\r\n          ...addedEvent,\r\n          id: eventId,\r\n          allDay: allDayEvent,\r\n          start: new Date(`${addedEvent.date}T${addedEvent.time}:00`),\r\n        },\r\n      ]);\r\n    } else {\r\n      alert('Пожалуйста укажите дату');\r\n    }\r\n  };\r\n\r\n  const handleDateClick = (dateClickInfo) => {\r\n    setDateClickItem(dateClickInfo.dateStr);\r\n    setIsOpenDialog(true);\r\n  };\r\n\r\n  const handleDrop = (date) => {\r\n    const dateEvent = new Date(date.event._instance.range.start);\r\n    const newDate = structureDate(dateEvent);\r\n    const dragAndDropEvent = getDropEvent(eventsInfo, date.event._def.publicId);\r\n\r\n    const OtherEvents = eventsInfo.filter(\r\n      (item) => Number(item.id) !== Number(date.event._def.publicId),\r\n    );\r\n    const newEvents = [\r\n      ...OtherEvents,\r\n      {\r\n        ...dragAndDropEvent,\r\n        date: newDate,\r\n        start: new Date(`${newDate}T${dragAndDropEvent.time}:00`),\r\n      },\r\n    ];\r\n    setEventInfo(newEvents);\r\n  };\r\n\r\n  const eventEdit = (eventClick) => {\r\n    const timeDate = `${eventClick.event.start}`.slice(16, 21);\r\n    setIsWholeDay(eventClick.event.allDay);\r\n    setEventOpenNow({\r\n      title: eventClick.event.title,\r\n      date: eventClick.event.startStr.slice(0, 10),\r\n      allDay: eventClick.event.allDay,\r\n      time: timeDate,\r\n      id: eventClick.event.id,\r\n      description: eventClick.event._def.extendedProps.description,\r\n      backgroundColor: eventClick.event.backgroundColor,\r\n      eventClick,\r\n    });\r\n    setIsOpenEdit(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FullCalendar\r\n        initialView=\"dayGridMonth\"\r\n        headerToolbar={{\r\n          left: 'prev,next today',\r\n          center: 'title',\r\n          right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\r\n        }}\r\n        editable={true}\r\n        droppable={true}\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        events={eventsInfo}\r\n        dateClick={handleDateClick}\r\n        eventClick={eventEdit}\r\n        eventDrop={handleDrop}\r\n      />\r\n      <SaveDialog\r\n        eventsInfo={eventsInfo}\r\n        setEventInfo={setEventInfo}\r\n        eventOpenNow={eventOpenNow}\r\n        setEventOpenNow={setEventOpenNow}\r\n        isOpenEdit={isOpenEdit}\r\n        onCloseEdit={setIsOpenEdit}\r\n        dateClickItem={dateClickItem}\r\n        isOpen={isOpenDialog}\r\n        onClose={setIsOpenDialog}\r\n        handleAddEvent={handleAddEvent}\r\n        isWholeDay={isWholeDay}\r\n        setIsWholeDay={setIsWholeDay}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EventCalendar;\r\n","import React from 'react';\nimport EventCalendar from './components/FullCalendar';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <EventCalendar />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}